import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    static int T;
    static int N;
    static int M;
    static int K;
    static int input[][];
    static boolean arr_v[][];
    static int answer;
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        T= Integer.parseInt(st.nextToken()); 
        
        

        for(int j=0; j<T; j++){
            st = new StringTokenizer(br.readLine());
            M = Integer.parseInt(st.nextToken()); 
            N = Integer.parseInt(st.nextToken());
            K = Integer.parseInt(st.nextToken());
            
            input = new int[N][M];
            arr_v = new boolean[N][M];
            
            answer=0;
            for(int i=0; i<K; i++){
                st = new StringTokenizer(br.readLine());
                int x=Integer.parseInt(st.nextToken());
                int y=Integer.parseInt(st.nextToken());
                input[y][x]=1;
            }

            for(int a=0; a<N; a++){
                for(int b=0; b<M; b++){
                    if(input[a][b]==1 && arr_v[a][b]==false){
                        answer++;
                        dfs(b,a);
                    }
                }
            }


            System.out.println(answer);
        }

    
    
    }
    
    public static void dfs(int x1, int y1){
        int now_x, now_y;
        arr_v[y1][x1]=true;
        int arrx[] = {0,0,-1,1};
        int arry[] = {-1,1,0,0};

        for(int i=0; i<4; i++){
            now_x= x1+arrx[i];
            now_y= y1+arry[i];

            if(now_x>=0 && now_x<M && now_y >=0 && now_y<N){
                if(arr_v[now_y][now_x]==false && input[now_y][now_x]==1)
                    dfs(now_x,now_y);
            }
        }
        
    }
    
}
