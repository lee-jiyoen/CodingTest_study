import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    static int N;
    static int M;
    static int V;
    static int input[][];
    static boolean arr_v[];
    static Queue<Integer> queue = new LinkedList<>();
    static int c;
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        N = Integer.parseInt(st.nextToken()); 
        M = Integer.parseInt(st.nextToken());
        V = Integer.parseInt(st.nextToken());

        input = new int[N+1][N+1];
        arr_v = new boolean[N+1];

        for(int i=0; i<M; i++){
            st = new StringTokenizer(br.readLine());
            int a=Integer.parseInt(st.nextToken());
            int b=Integer.parseInt(st.nextToken());
            input[a][b]=1;
            input[b][a]=1;
        }

        dfs(V);
        System.out.println();

        Arrays.fill(arr_v,false);
        bfs(V);
    
    }

    public static void dfs(int s){
        arr_v[s]=true;
        System.out.print(s+" ");
        
        if(c==N){
            return;
        }
        c++;

        for(int i=1; i<=N; i++){
            if(arr_v[i]==false && input[s][i]==1){
                dfs(i);
            }
        }
        
    }
    
    public static void bfs(int s){
        arr_v[s]=true;
        System.out.print(s+" ");
        queue.offer(s);

        while(!queue.isEmpty()){
            int s2=queue.poll();
            for(int i=1; i<=N; i++){
                if(arr_v[i]==false && input[s2][i]==1){
                    queue.offer(i);
                    arr_v[i] = true;
                    System.out.print(i+" ");
                }
            }
        }
    }
    
}
