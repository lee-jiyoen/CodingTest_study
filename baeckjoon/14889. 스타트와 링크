import java.util.*;
import java.io.*;

class Main {
    static int N;
    static int[][] team;
    static boolean[] visit;
    static int min = Integer.MAX_VALUE; 

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
        N = Integer.parseInt(br.readLine());
        team = new int[N][N];
        visit = new boolean[N];

        for(int i = 0; i < N; i++){
            StringTokenizer st = new StringTokenizer(br.readLine());
            for(int j = 0; j < N; j++){
                team[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        dfs(0, 0);

        System.out.println(min);
    }

    public static void dfs(int index, int s){
        if(s == N / 2){
            cal();
            return;
        }
        for(int i = index; i < N; i++){
            visit[i] = true;
            dfs(i + 1, s + 1);
            visit[i] = false;
        }
    }

    public static void cal(){
        int startt = 0;
        int linkt = 0;

        for(int i = 0; i < N - 1; i++){
            for(int j = i + 1; j < N; j++){
                if(visit[i] && visit[j]){
                    startt += team[i][j] + team[j][i];
                }
                else if(!visit[i] && !visit[j]){
                    linkt += team[i][j] + team[j][i];
                }
            }
        }

        int df = Math.abs(startt - linkt);
        if(df == 0){
            System.out.println(df);
            System.exit(0);
        }
        min = Math.min(df, min);
    }
}
